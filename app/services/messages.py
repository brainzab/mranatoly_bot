import logging
import asyncio
from datetime import datetime
from aiogram import Bot
from app.services.api import ApiClient
from app.config import CHAT_ID, TARGET_CHAT_ID
from app.services.ai import AiHandler

logger = logging.getLogger(__name__)

def split_long_message(text, max_length=4096):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    for i in range(0, len(text), max_length):
        parts.append(text[i:i + max_length])
    return parts

async def send_long_message(bot, chat_id, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º."""
    parts = split_long_message(text)
    sent_messages = []
    for part in parts:
        sent = await bot.send_message(chat_id=chat_id, text=part, **kwargs)
        sent_messages.append(sent)
    return sent_messages

class MorningMessageSender:
    def __init__(self, bot):
        self.bot = bot

    async def get_ai_wish_by_day(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç –ò–ò –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            current_day = datetime.now().weekday()
            day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            day_name = day_names[current_day]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è (—Ä–∞–±–æ—á–∏–π –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π)
            is_weekend = current_day >= 5  # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            is_friday = current_day == 4   # 4 - –ø—è—Ç–Ω–∏—Ü–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if is_weekend:
                prompt = f"–°–µ–≥–æ–¥–Ω—è {day_name}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –¥—Ä—É–∑–µ–π. –ü–æ–∂–µ–ª–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, —Å —é–º–æ—Ä–æ–º, –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –î–ª–∏–Ω–∞ - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è."
            elif is_friday:
                prompt = f"–°–µ–≥–æ–¥–Ω—è {day_name}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–π –ø—è—Ç–Ω–∏—Ü—ã –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –¥—Ä—É–∑–µ–π. –ü–æ–∂–µ–ª–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, —Å —é–º–æ—Ä–æ–º. –î–ª–∏–Ω–∞ - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è."
            else:
                prompt = f"–°–µ–≥–æ–¥–Ω—è {day_name}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –¥—Ä—É–∑–µ–π. –ü–æ–∂–µ–ª–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, —Å —é–º–æ—Ä–æ–º, –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –î–ª–∏–Ω–∞ - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è."
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            wish = await AiHandler.get_ai_response([], prompt)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ {day_name}: {wish[:50]}...")
            
            return wish
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç –ò–ò: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return "‚ù§Ô∏è –ñ–µ–ª–∞—é –≤—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è! –ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–∏—Ç—Å—è!"

    async def send_morning_message(self):
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        try:
            cities = {
                "–ú–∏–Ω—Å–∫": "Minsk,BY", "–ñ–ª–æ–±–∏–Ω": "Zhlobin,BY", "–ì–æ–º–µ–ª—å": "Gomel,BY",
                "–ñ–∏—Ç–∫–æ–≤–∏—á–∏": "Zhitkovichi,BY", "–®—Ä–∏-–õ–∞–Ω–∫–∞": "Colombo,LK", "–ù–æ—è–±—Ä—å—Å–∫": "Noyabrsk,RU"
            }
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
            weather_tasks = [ApiClient.get_weather(code, TARGET_CHAT_ID) for code in cities.values()]
            currency_task = ApiClient.get_currency_rates(TARGET_CHAT_ID)
            crypto_task = ApiClient.get_crypto_prices(TARGET_CHAT_ID)
            wish_task = self.get_ai_wish_by_day()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"–ó–∞–ø—É—â–µ–Ω—ã –∑–∞–¥–∞—á–∏: –ø–æ–≥–æ–¥–∞ ({len(weather_tasks)}), –≤–∞–ª—é—Ç—ã, –∫—Ä–∏–ø—Ç–∞, –ø–æ–∂–µ–ª–∞–Ω–∏–µ")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            weather_results = []
            for i, task in enumerate(weather_tasks):
                try:
                    result = await asyncio.wait_for(task, timeout=10)  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                    weather_results.append(result)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ {i+1}/{len(weather_tasks)}")
                except asyncio.TimeoutError:
                    logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã {i+1}/{len(weather_tasks)}")
                    weather_results.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–π–º–∞—É—Ç)")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã {i+1}/{len(weather_tasks)}: {e}")
                    weather_results.append(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ({str(e)[:20]})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            try:
                usd_byn_rate, usd_rub_rate = await asyncio.wait_for(currency_task, timeout=10)
                logger.info("–ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
            except asyncio.TimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
                usd_byn_rate, usd_rub_rate = "?", "?"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
                usd_byn_rate, usd_rub_rate = "?", "?"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            try:
                btc_price_usd, wld_price_usd = await asyncio.wait_for(crypto_task, timeout=10)
                logger.info("–ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            except asyncio.TimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                btc_price_usd, wld_price_usd = "?", "?"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
                btc_price_usd, wld_price_usd = "?", "?"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
            try:
                ai_wish = await asyncio.wait_for(wish_task, timeout=20)  # AI –º–æ–∂–µ—Ç –¥–æ–ª—å—à–µ –æ—Ç–≤–µ—á–∞—Ç—å
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ: {ai_wish[:30]}...")
            except asyncio.TimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç AI")
                ai_wish = "‚ù§Ô∏è –•–æ—Ä–æ—à–µ–≥–æ –≤—Å–µ–º –¥–Ω—è! –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—å—é."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {e}")
                ai_wish = f"‚ù§Ô∏è –•–æ—Ä–æ—à–µ–≥–æ –≤—Å–µ–º –¥–Ω—è! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)[:30]}"
            
            weather_data = dict(zip(cities.keys(), weather_results))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –≤ BYN
            try:
                btc_price_byn = float(btc_price_usd) * float(usd_byn_rate) if btc_price_usd not in ("?", None) and usd_byn_rate not in ("?", None) else "?"
                wld_price_byn = float(wld_price_usd) * float(usd_byn_rate) if wld_price_usd not in ("?", None) and usd_byn_rate not in ("?", None) else "?"
            except (ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω –≤ BYN: {e}")
                btc_price_byn, wld_price_byn = "?", "?"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
            def format_price(price):
                if price == "?":
                    return "?"
                try:
                    if isinstance(price, (int, float)) and price > 1000:
                        return f"{price:,.2f}"
                    elif isinstance(price, (int, float)):
                        return f"{price:.4f}" if price < 1 else f"{price:.2f}"
                    return price
                except Exception:
                    return str(price)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "–†–æ–¥–Ω—ã–µ –º–æ–∏, –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ù§Ô∏è\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –ø–æ–≥–æ–¥–µ:*\n"
                + "\n".join(f"üå• *{city}*: {data}" 
                          for city, data in weather_data.items()) + "\n\n"
                "*–ü–æ–ª–æ–∂–Ω—è–∫ –ø–æ –∫—É—Ä—Å–∞–º:*\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –Ω–∞–ª–∏—á–∏—è
            if usd_byn_rate != "?":
                message += f"üíµ *USD/BYN*: {format_price(usd_byn_rate)} BYN\n"
            else:
                message += "üíµ *USD/BYN*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                
            if usd_rub_rate != "?":
                message += f"üíµ *USD/RUB*: {format_price(usd_rub_rate)} RUB\n"
            else:
                message += "üíµ *USD/RUB*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                
            if btc_price_usd != "?":
                if btc_price_byn != "?":
                    message += f"‚Çø *BTC*: ${format_price(btc_price_usd)} USD | {format_price(btc_price_byn)} BYN\n"
                else:
                    message += f"‚Çø *BTC*: ${format_price(btc_price_usd)} USD\n"
            else:
                message += "‚Çø *BTC*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                
            if wld_price_usd != "?":
                if wld_price_byn != "?":
                    message += f"üåç *WLD*: ${format_price(wld_price_usd)} USD | {format_price(wld_price_byn)} BYN\n\n"
                else:
                    message += f"üåç *WLD*: ${format_price(wld_price_usd)} USD\n\n"
            else:
                message += "üåç *WLD*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
            message += f"{ai_wish}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await self.bot.send_message(
                chat_id=CHAT_ID, 
                text=message, 
                parse_mode="MARKDOWN"
            )
            
            logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            from app.config import MONITORING_ENABLED, ADMIN_CHAT_ID
            if MONITORING_ENABLED and ADMIN_CHAT_ID != CHAT_ID:
                await self.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text="‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç"
                )
            
            return sent_message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            from app.config import MONITORING_ENABLED, ADMIN_CHAT_ID
            if MONITORING_ENABLED:
                from app.services.monitoring import monitoring
                monitoring.log_error(e, {"context": "morning_message"})
                try:
                    await self.bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
                    )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            return None