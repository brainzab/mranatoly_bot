import logging
from aiogram import types
from aiogram.filters import Command
from functools import partial
from app.services.api import ApiClient
from app.database.models import ChatHistory
from app.config import CODE_VERSION, TARGET_CHAT_ID, TEAM_IDS
from app.services.monitoring import monitoring, monitor_function
import asyncpg
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)

class CommandHandlers:
    def __init__(self, bot, db_pool):
        self.bot = bot
        self.db_pool = db_pool

    @monitor_function
    async def command_start(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        monitoring.increment_command(message.chat.id)
        sent_message = await message.reply(f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}"
            )

    @monitor_function
    async def command_version(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /version"""
        monitoring.increment_command(message.chat.id)
        sent_message = await message.reply(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}")
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}"
            )

    @monitor_function
    async def command_reset(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI"""
        monitoring.increment_command(message.chat.id)
        chat_id = message.chat.id
        await ChatHistory.increment_reset_id(self.db_pool, chat_id)
        sent_message = await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å–±—Ä–æ—à–µ–Ω, –º—É–¥–∏–ª–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
        if chat_id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                chat_id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å–±—Ä–æ—à–µ–Ω, –º—É–¥–∏–ª–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!"
            )

    @monitor_function
    async def command_stats(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        monitoring.increment_command(message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitoring.get_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        chats_stats = monitoring.get_all_chats_stats()
        
        # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–æ—Ç–∞
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']}\n"
            f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_mb']} –ú–ë\n"
            f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']}\n"
            f"‚å®Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {stats['command_count']}\n"
            f"üß† AI-–∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ–≥–æ): {stats['ai_request_count']}\n"
            f"üåê API-–∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ–≥–æ): {stats['api_request_count']}\n"
            f"üóÑÔ∏è –û–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {stats['db_operation_count']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {stats['error_count']}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        if chats_stats["total_chats"] > 0:
            response += f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:\n"
            response += f"üè¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chats_stats['total_chats']}\n"
            response += f"üß† AI-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º: {chats_stats['total_ai_requests']}\n"
            response += f"üåê API-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º: {chats_stats['total_api_requests']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            max_chats_to_display = 10
            if len(chats_stats["chats"]) <= max_chats_to_display:
                response += f"üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º:\n\n"
                for chat_id, chat_stats in chats_stats["chats"].items():
                    response += (
                        f"–ß–∞—Ç {chat_id}:\n"
                        f"- üß† AI-–∑–∞–ø—Ä–æ—Å–æ–≤: {chat_stats['ai_request_count']}\n"
                        f"- üåê API-–∑–∞–ø—Ä–æ—Å–æ–≤: {chat_stats['api_request_count']}\n"
                        f"- üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {chat_stats['message_count']}\n"
                        f"- ‚å®Ô∏è –ö–æ–º–∞–Ω–¥: {chat_stats['command_count']}\n\n"
                    )
        
        response += f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}"
        await message.reply(response)

    @monitor_function
    async def command_test(self, message: types.Message, **kwargs):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        monitoring.increment_command(message.chat.id)
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_ok = await self.check_database_health()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç—ã
            weather_test = await ApiClient.get_weather("Minsk,BY", message.chat.id)
            currency_test = await ApiClient.get_currency_rates(message.chat.id)
            
            response = (
                f"üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:\n\n"
                f"ü§ñ –ë–æ—Ç: –û–Ω–ª–∞–π–Ω ‚úÖ\n"
                f"üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if db_ok else '–û—à–∏–±–∫–∞ ‚ùå'}\n"
                f"üå§Ô∏è API –ø–æ–≥–æ–¥—ã: {'–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' not in weather_test else '–û—à–∏–±–∫–∞ ‚ùå'}\n"
                f"üí± API –≤–∞–ª—é—Ç: {'–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if all(currency_test) else '–û—à–∏–±–∫–∞ ‚ùå'}\n\n"
                f"üìã –í–µ—Ä—Å–∏—è: {CODE_VERSION}"
            )
            
            await message.reply(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            async with self.db_pool.acquire() as conn:
                result = await conn.fetchval("SELECT 1")
                if result == 1:
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –û–ö")
                    return True
                else:
                    logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return False
        except asyncpg.exceptions.PostgresConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "db_health_check", "type": "connection_error"})
            return False
        except asyncpg.exceptions.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "db_health_check", "type": "postgres_error"})
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "db_health_check", "type": "unexpected_error"})
            return False

    @monitor_function
    async def command_team_matches(self, message: types.Message, team_name, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã"""
        monitoring.increment_command(message.chat.id)
        team_id = TEAM_IDS.get(team_name)
        if not team_id:
            sent_message = await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º—É–¥–∏–ª–∞!")
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º—É–¥–∏–ª–∞!"
                )
            return
        
        data = await ApiClient.get_team_matches(team_id, message.chat.id)
        if not data or not data.get("response"):
            sent_message = await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ!")
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ!"
                )
            return
        
        response = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π {team_name.upper()}:\n\n"
        for fixture in data["response"]:
            fixture_id = fixture["fixture"]["id"]
            home_team = fixture["teams"]["home"]["name"]
            away_team = fixture["teams"]["away"]["name"]
            home_goals = fixture["goals"]["home"] if fixture["goals"]["home"] is not None else 0
            away_goals = fixture["goals"]["away"] if fixture["goals"]["away"] is not None else 0
            date = fixture["fixture"]["date"].split("T")[0]
            result_icon = ("üü¢" if home_goals > away_goals else "üî¥" if home_goals < away_goals else "üü°") \
                if fixture["teams"]["home"]["id"] == team_id else \
                ("üü¢" if away_goals > home_goals else "üî¥" if away_goals < home_goals else "üü°")
            
            events_data = await ApiClient.get_match_events(fixture_id, message.chat.id)
            goals_str = "–ì–æ–ª—ã: "
            if events_data and events_data.get("response"):
                goal_events = [e for e in events_data["response"] if e["type"] == "Goal"]
                goals_str += ", ".join([f"{e['player']['name']} ({e['time']['elapsed']}')" for e in goal_events]) \
                    if goal_events else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–∞—Ö"
            else:
                goals_str += "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"
                
            response += f"{result_icon} {date}: {home_team} {home_goals} - {away_goals} {away_team}\n{goals_str}\n\n"
        
        sent_message = await message.reply(response)
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                response
            )