import logging
from aiogram import types
from aiogram.filters import Command
from functools import partial
from app.services.api import ApiClient
from app.database.models import ChatHistory
from app.config import CODE_VERSION, TARGET_CHAT_ID, TEAM_IDS, MONITORING_ENABLED, REACTION_ENABLED, REACTION_TARGET_USER_ID, TARGET_REACTION
from app.services.monitoring import monitoring, monitor_function
import asyncpg
import asyncio
from datetime import datetime
import os

logger = logging.getLogger(__name__)

class CommandHandlers:
    def __init__(self, bot, db_pool):
        self.bot = bot
        self.db_pool = db_pool

    @monitor_function
    async def command_start(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        monitoring.increment_command(message.chat.id)
        sent_message = await message.reply(f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}")
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ—Ä—Å–∏–∏ {CODE_VERSION}"
            )

    @monitor_function
    async def command_version(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /version"""
        monitoring.increment_command(message.chat.id)
        sent_message = await message.reply(f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}")
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}"
            )

    @monitor_function
    async def command_reset(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI"""
        monitoring.increment_command(message.chat.id)
        chat_id = message.chat.id
        await ChatHistory.increment_reset_id(self.db_pool, chat_id)
        sent_message = await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å–±—Ä–æ—à–µ–Ω, –º—É–¥–∏–ª–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
        if chat_id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                chat_id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å–±—Ä–æ—à–µ–Ω, –º—É–¥–∏–ª–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!"
            )

    @monitor_function
    async def command_stats(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        monitoring.increment_command(message.chat.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitoring.get_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        chats_stats = monitoring.get_all_chats_stats()
        
        # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–æ—Ç–∞
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']}\n"
            f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_mb']} –ú–ë\n"
            f"üí¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']}\n"
            f"‚å®Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {stats['command_count']}\n"
            f"üß† AI-–∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ–≥–æ): {stats['ai_request_count']}\n"
            f"üåê API-–∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ–≥–æ): {stats['api_request_count']}\n"
            f"üóÑÔ∏è –û–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {stats['db_operation_count']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {stats['error_count']}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        if chats_stats["total_chats"] > 0:
            response += f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:\n"
            response += f"üè¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chats_stats['total_chats']}\n"
            response += f"üß† AI-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º: {chats_stats['total_ai_requests']}\n"
            response += f"üåê API-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º: {chats_stats['total_api_requests']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            max_chats_to_display = 10
            if len(chats_stats["chats"]) <= max_chats_to_display:
                response += f"üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º:\n\n"
                for chat_id, chat_stats in chats_stats["chats"].items():
                    response += (
                        f"–ß–∞—Ç {chat_id}:\n"
                        f"- üß† AI-–∑–∞–ø—Ä–æ—Å–æ–≤: {chat_stats['ai_request_count']}\n"
                        f"- üåê API-–∑–∞–ø—Ä–æ—Å–æ–≤: {chat_stats['api_request_count']}\n"
                        f"- üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {chat_stats['message_count']}\n"
                        f"- ‚å®Ô∏è –ö–æ–º–∞–Ω–¥: {chat_stats['command_count']}\n\n"
                    )
        
        response += f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {CODE_VERSION}"
        await message.reply(response)

    @monitor_function
    async def command_test(self, message: types.Message, **kwargs):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        monitoring.increment_command(message.chat.id)
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_ok = await self.check_database_health()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç—ã
            weather_test = await ApiClient.get_weather("Minsk,BY", message.chat.id)
            currency_test = await ApiClient.get_currency_rates(message.chat.id)
            
            response = (
                f"üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:\n\n"
                f"ü§ñ –ë–æ—Ç: –û–Ω–ª–∞–π–Ω ‚úÖ\n"
                f"üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if db_ok else '–û—à–∏–±–∫–∞ ‚ùå'}\n"
                f"üå§Ô∏è API –ø–æ–≥–æ–¥—ã: {'–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' not in weather_test else '–û—à–∏–±–∫–∞ ‚ùå'}\n"
                f"üí± API –≤–∞–ª—é—Ç: {'–†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if all(currency_test) else '–û—à–∏–±–∫–∞ ‚ùå'}\n\n"
                f"üìã –í–µ—Ä—Å–∏—è: {CODE_VERSION}"
            )
            
            await message.reply(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            async with self.db_pool.acquire() as conn:
                result = await conn.fetchval("SELECT 1")
                if result == 1:
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –û–ö")
                    return True
                else:
                    logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return False
        except asyncpg.exceptions.PostgresConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "db_health_check", "type": "connection_error"})
            return False
        except asyncpg.exceptions.PostgresError as e:
            logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "db_health_check", "type": "postgres_error"})
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            if MONITORING_ENABLED:
                monitoring.log_error(e, {"context": "db_health_check", "type": "unexpected_error"})
            return False

    @monitor_function
    async def command_team_matches(self, message: types.Message, team_name, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã"""
        monitoring.increment_command(message.chat.id)
        team_id = TEAM_IDS.get(team_name)
        if not team_id:
            sent_message = await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º—É–¥–∏–ª–∞!")
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º—É–¥–∏–ª–∞!"
                )
            return
        
        data = await ApiClient.get_team_matches(team_id, message.chat.id)
        if not data or not data.get("response"):
            sent_message = await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ!")
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö. –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ!"
                )
            return
        
        response = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π {team_name.upper()}:\n\n"
        for fixture in data["response"]:
            fixture_id = fixture["fixture"]["id"]
            home_team = fixture["teams"]["home"]["name"]
            away_team = fixture["teams"]["away"]["name"]
            home_goals = fixture["goals"]["home"] if fixture["goals"]["home"] is not None else 0
            away_goals = fixture["goals"]["away"] if fixture["goals"]["away"] is not None else 0
            date = fixture["fixture"]["date"].split("T")[0]
            result_icon = ("üü¢" if home_goals > away_goals else "üî¥" if home_goals < away_goals else "üü°") \
                if fixture["teams"]["home"]["id"] == team_id else \
                ("üü¢" if away_goals > home_goals else "üî¥" if away_goals < home_goals else "üü°")
            
            events_data = await ApiClient.get_match_events(fixture_id, message.chat.id)
            goals_str = "–ì–æ–ª—ã: "
            if events_data and events_data.get("response"):
                goal_events = [e for e in events_data["response"] if e["type"] == "Goal"]
                goals_str += ", ".join([f"{e['player']['name']} ({e['time']['elapsed']}')" for e in goal_events]) \
                    if goal_events else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–∞—Ö"
            else:
                goals_str += "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"
                
            response += f"{result_icon} {date}: {home_team} {home_goals} - {away_goals} {away_team}\n{goals_str}\n\n"
        
        sent_message = await message.reply(response)
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                response
            )

    @monitor_function
    async def command_pogoda(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pogoda –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö"""
        monitoring.increment_command(message.chat.id)
        
        cities = {
            "–ú–∏–Ω—Å–∫": "Minsk,BY",
            "–ì–æ–º–µ–ª—å": "Gomel,BY",
            "–ñ–ª–æ–±–∏–Ω": "Zhlobin,BY"
        }
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
        weather_tasks = [ApiClient.get_weather(code, message.chat.id) for code in cities.values()]
        weather_results = await asyncio.gather(*weather_tasks, return_exceptions=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        weather_data = dict(zip(cities.keys(), weather_results))
        
        response = "üå§ *–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:*\n\n"
        for city, data in weather_data.items():
            if isinstance(data, Exception):
                response += f"üèô *{city}*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            else:
                response += f"üèô *{city}*: {data}\n"
        
        sent_message = await message.reply(response, parse_mode="Markdown")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if message.chat.id == TARGET_CHAT_ID:
            await ChatHistory.save_message(
                self.db_pool, 
                message.chat.id, 
                self.bot.id, 
                sent_message.message_id, 
                "assistant", 
                response
            )

    @monitor_function
    async def command_wld(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wld –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ WLD"""
        monitoring.increment_command(message.chat.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            btc_price_usd, wld_price_usd = await ApiClient.get_crypto_prices(message.chat.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            usd_byn_rate, usd_rub_rate = await ApiClient.get_currency_rates(message.chat.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not wld_price_usd or not usd_byn_rate or not usd_rub_rate:
                sent_message = await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                if message.chat.id == TARGET_CHAT_ID:
                    await ChatHistory.save_message(
                        self.db_pool, 
                        message.chat.id, 
                        self.bot.id, 
                        sent_message.message_id, 
                        "assistant", 
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –≤ BYN –∏ RUB
            wld_price_byn = float(wld_price_usd) * float(usd_byn_rate)
            wld_price_rub = float(wld_price_usd) * float(usd_rub_rate)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = (
                f"üí∞ *–ö—É—Ä—Å WorldCoin (WLD):*\n\n"
                f"üìà USD: ${wld_price_usd:.4f}\n"
                f"üìà BYN: {wld_price_byn:.4f} BYN\n"
                f"üìà RUB: {wld_price_rub:.4f} RUB\n\n"
                f"‚è± –î–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            sent_message = await message.reply(response, parse_mode="Markdown")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    response
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ WLD: {e}")
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}"
            await message.reply(error_message)

    @monitor_function
    async def command_rub(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rub –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB"""
        monitoring.increment_command(message.chat.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            usd_byn_rate, usd_rub_rate = await ApiClient.get_currency_rates(message.chat.id)
            
            if not usd_rub_rate:
                sent_message = await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ USD/RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                if message.chat.id == TARGET_CHAT_ID:
                    await ChatHistory.save_message(
                        self.db_pool, 
                        message.chat.id, 
                        self.bot.id, 
                        sent_message.message_id, 
                        "assistant", 
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ USD/RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å (RUB/USD)
            rub_usd_rate = 1 / float(usd_rub_rate) if float(usd_rub_rate) > 0 else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = (
                f"üíµ *–ö—É—Ä—Å USD/RUB:*\n\n"
                f"1 USD = {float(usd_rub_rate):.4f} RUB\n"
                f"1 RUB = {rub_usd_rate:.6f} USD\n\n"
                f"‚è± –î–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            sent_message = await message.reply(response, parse_mode="Markdown")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    response
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD/RUB: {e}")
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}"
            await message.reply(error_message)

    @monitor_function
    async def command_byn(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /byn –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/BYN"""
        monitoring.increment_command(message.chat.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            usd_byn_rate, usd_rub_rate = await ApiClient.get_currency_rates(message.chat.id)
            
            if not usd_byn_rate:
                sent_message = await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ USD/BYN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                if message.chat.id == TARGET_CHAT_ID:
                    await ChatHistory.save_message(
                        self.db_pool, 
                        message.chat.id, 
                        self.bot.id, 
                        sent_message.message_id, 
                        "assistant", 
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ USD/BYN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å (BYN/USD)
            byn_usd_rate = 1 / float(usd_byn_rate) if float(usd_byn_rate) > 0 else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = (
                f"üíµ *–ö—É—Ä—Å USD/BYN:*\n\n"
                f"1 USD = {float(usd_byn_rate):.4f} BYN\n"
                f"1 BYN = {byn_usd_rate:.6f} USD\n\n"
                f"‚è± –î–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            sent_message = await message.reply(response, parse_mode="Markdown")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if message.chat.id == TARGET_CHAT_ID:
                await ChatHistory.save_message(
                    self.db_pool, 
                    message.chat.id, 
                    self.bot.id, 
                    sent_message.message_id, 
                    "assistant", 
                    response
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD/BYN: {e}")
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}"
            await message.reply(error_message)

    @monitor_function
    async def command_chatstats(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatstats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        monitoring.increment_command(message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        if message.chat.type not in ['group', 'supergroup']:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
            return
        
        try:
            chat_id = message.chat.id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            wait_message = await message.reply("‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            day_stats = await ChatHistory.get_chat_messages_stats(self.db_pool, chat_id, "day")
            month_stats = await ChatHistory.get_chat_messages_stats(self.db_pool, chat_id, "month")
            all_stats = await ChatHistory.get_chat_messages_stats(self.db_pool, chat_id, None)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ
            if all_stats["total_messages"] == 0:
                await message.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
                await self.bot.delete_message(chat_id=chat_id, message_id=wait_message.message_id)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.bot.get_chat(chat_id)
            chat_name = chat_info.title or f"Chat {chat_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_user_ids = [user_stat["user_id"] for user_stat in all_stats["users"]]
            usernames = {}
            
            for user_id in all_user_ids:
                try:
                    chat_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                    user = chat_member.user
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user.username:
                        name = f"@{user.username}"
                    else:
                        name = user.full_name or f"User {user_id}"
                    
                    usernames[user_id] = name
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    usernames[user_id] = f"User {user_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_name}*\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
            response += f"*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n"
            response += f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {day_stats['total_messages']}\n"
            if day_stats['users']:
                response += "–¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:\n"
                for i, user in enumerate(day_stats['users'][:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
                    user_id = user['user_id']
                    username = usernames.get(user_id, f"User {user_id}")
                    response += f"{i}. {username}: {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥\n"
            
            response += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
            response += f"*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*\n"
            response += f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {month_stats['total_messages']}\n"
            if month_stats['users']:
                response += "–¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:\n"
                for i, user in enumerate(month_stats['users'][:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
                    user_id = user['user_id']
                    username = usernames.get(user_id, f"User {user_id}")
                    response += f"{i}. {username}: {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥\n"
            
            response += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
            response += f"*–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n"
            response += f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {all_stats['total_messages']}\n"
            if all_stats['users']:
                response += "–¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:\n"
                for i, user in enumerate(all_stats['users'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
                    user_id = user['user_id']
                    username = usernames.get(user_id, f"User {user_id}")
                    response += f"{i}. {username}: {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
            await self.bot.delete_message(chat_id=chat_id, message_id=wait_message.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.reply(response, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞: {e}")
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    @monitor_function
    async def command_reaction(self, message: types.Message, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reaction –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        monitoring.increment_command(message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = False
        try:
            chat_member = await self.bot.get_chat_member(message.chat.id, message.from_user.id)
            is_admin = chat_member.status in ["administrator", "creator"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        if not is_admin:
            sent_message = await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏—è–º–∏, –ø–µ—Ç—É—à–æ–∫!")
            return
            
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        if not args:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if REACTION_ENABLED else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            target_user = REACTION_TARGET_USER_ID if REACTION_ENABLED else "–Ω–µ –∑–∞–¥–∞–Ω"
            reaction = TARGET_REACTION if REACTION_ENABLED and TARGET_REACTION else "–Ω–µ –∑–∞–¥–∞–Ω–∞"
            
            response = (
                f"üîπ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–π:\n"
                f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ñ´Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user}\n"
                f"‚ñ´Ô∏è –†–µ–∞–∫—Ü–∏—è: {reaction}\n\n"
                f"üî∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚ñ´Ô∏è /reaction on|off - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\n"
                f"‚ñ´Ô∏è /reaction set_user ID - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π\n"
                f"‚ñ´Ô∏è /reaction set_emoji EMOJI - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏\n"
                f"‚ñ´Ô∏è /reaction clear - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏"
            )
            
            sent_message = await message.reply(response)
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        action = args[0].lower()
        
        if action == "on":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['REACTION_ENABLED'] = 'true'
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –ø–∞–º—è—Ç–∏
            import app.config
            app.config.REACTION_ENABLED = True
            sent_message = await message.reply("‚úÖ –†–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã")
            
        elif action == "off":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['REACTION_ENABLED'] = 'false'
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –ø–∞–º—è—Ç–∏
            import app.config
            app.config.REACTION_ENABLED = False
            sent_message = await message.reply("‚úÖ –†–µ–∞–∫—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã")
            
        elif action == "set_user" and len(args) > 1:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID
                user_id = int(args[1])
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                os.environ['REACTION_TARGET_USER_ID'] = str(user_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –ø–∞–º—è—Ç–∏
                import app.config
                app.config.REACTION_TARGET_USER_ID = user_id
                sent_message = await message.reply(f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_id}")
            except ValueError:
                sent_message = await message.reply("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                
        elif action == "set_emoji" and len(args) > 1:
            emoji = args[1]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ä–µ–∞–∫—Ü–∏—è
            # –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if len(emoji) <= 2:
                sent_message = await message.reply("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —ç–º–æ–¥–∑–∏")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['TARGET_REACTION'] = emoji
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –ø–∞–º—è—Ç–∏
            import app.config
            app.config.TARGET_REACTION = emoji
            sent_message = await message.reply(f"‚úÖ –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {emoji}")
            
        elif action == "clear":
            # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            os.environ['REACTION_ENABLED'] = 'false'
            os.environ['TARGET_REACTION'] = ''
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
            import app.config
            app.config.REACTION_ENABLED = False
            app.config.TARGET_REACTION = ''
            sent_message = await message.reply("‚úÖ –†–µ–∞–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
            
        else:
            sent_message = await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reaction –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")