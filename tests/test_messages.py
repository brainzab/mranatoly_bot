import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from app.services.messages import MorningMessageSender, split_long_message, send_long_message

@pytest.mark.asyncio
async def test_split_long_message():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    short_message = "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    parts = split_long_message(short_message, max_length=100)
    assert len(parts) == 1
    assert parts[0] == short_message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    long_message = "x" * 150
    parts = split_long_message(long_message, max_length=100)
    assert len(parts) == 2
    assert parts[0] == "x" * 100
    assert parts[1] == "x" * 50

@pytest.mark.asyncio
async def test_send_long_message():
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    bot = AsyncMock()
    bot.send_message.return_value = MagicMock()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_long_message(bot, chat_id=123, text="–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    assert bot.send_message.call_count == 1
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    bot.send_message.reset_mock()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_long_message(bot, chat_id=123, text="x" * 5000, max_length=2000)
    assert bot.send_message.call_count == 3

@pytest.mark.asyncio
async def test_morning_message_sender():
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    bot = AsyncMock()
    sender = MorningMessageSender(bot)
    
    # –ú–æ–∫–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã –∫ API
    with patch('app.services.api.ApiClient.get_weather', return_value="10¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ"), \
         patch('app.services.api.ApiClient.get_currency_rates', return_value=(2.5, 90.0)), \
         patch('app.services.api.ApiClient.get_crypto_prices', return_value=(50000, 0.5)):
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await sender.send_morning_message()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        bot.send_message.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        text = bot.send_message.call_args[1]['text']
        assert "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ" in text.lower()
        assert "–ø–æ–≥–æ–¥–µ" in text
        assert "usd/byn" in text.lower()
        assert "btc" in text.lower()

@pytest.mark.asyncio
async def test_get_ai_wish_by_day():
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    bot = AsyncMock()
    sender = MorningMessageSender(bot)
    
    # –ú–æ–∫–∞–µ–º –≤—ã–∑–æ–≤ –∫ AI
    expected_wish = "üåü –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—Ö–∞–º–∏ –∏ —Ä–∞–¥–æ—Å—Ç—å—é!"
    with patch('app.services.ai.AiHandler.get_ai_response', return_value=expected_wish):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
        wish = await sender.get_ai_wish_by_day()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
        assert wish == expected_wish
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AiHandler.get_ai_response –±—ã–ª –≤—ã–∑–≤–∞–Ω
        from app.services.ai import AiHandler
        AiHandler.get_ai_response.assert_called_once() 